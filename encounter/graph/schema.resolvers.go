package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/smallretardedfish/gql-federation/encounter/graph/model"
)

// Encounters is the resolver for the encounters field.
func (r *patientResolver) Encounters(ctx context.Context, obj *model.Patient) ([]*model.Encounter, error) {
	filter := &EncounterFilter{
		PatientID: &obj.ID,
	}
	encounters, err := r.EncounterStore.GetEncounters(ctx, filter)
	if err != nil {
		return nil, err
	}

	return encounters, nil
}

// Encounters is the resolver for the encounters field.
func (r *queryResolver) Encounters(ctx context.Context) ([]*model.Encounter, error) {
	encounters, err := r.EncounterStore.GetEncounters(ctx, nil)
	if err != nil {
		return nil, err
	}

	return encounters, nil
}

// Patient returns PatientResolver implementation.
func (r *Resolver) Patient() PatientResolver { return &patientResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type patientResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
